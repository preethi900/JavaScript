/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(numbers, target) {
 let i = 0 ; j = numbers.length - 1;
 while (numbers[i] + numbers[j] !== target) {
     if (numbers[i] + numbers[j] < target) {
         i++;
     } else {
         j--;
     }
 }
    return [i+1,j+1];
};


//Using dictionary method

var twoSum = function(numbers, target) {
  let map = {};
    for (var i = 0 ; i < numbers.length ; i++) {
        const addend = target - numbers[i];
        if(!(addend in map)) {
            map[numbers[i]] = i+1;
        } else {
            return [map[addend],i+1];
        }
    }
    
    
};

var twoSum = function(nums, target) {
 for(var i=0 ; i < nums.length ; i++) {
        for(var j =i+1; j < nums.length ; j++){
            if(nums[i]+nums[j] === target) {
                 return [i,j];
            }
         }
    } 
};

var twoSum = function(numbers, target) {
   let start = 0;
    let end = numbers.length -1;
    
    while(start <= end) {
        let s = numbers[start] + numbers[end];
        if(s === target) {
            return [start+1,end+1];
        } else if( s > target) {
            end--;
        } else {
            start++;
        }
    }
   
};

var twoSum = function(nums, target) {
   var map ={};
   for(var i=0; i < nums.length ; i++) {
       let diff = target - nums[i];
        if(diff in map) {
           return [map[diff],i];
       }
       if(!(nums[i] in map)) {
           map[nums[i]] = i;
       }
   }
};
