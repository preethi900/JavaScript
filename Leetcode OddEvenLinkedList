var oddEvenList = function(head) {
    var List1 = new ListNode();
    var List2 = new ListNode();
    var odd = List1;
    var even = List2;
    var length = 0;
    while(head) {
        length++;
        if(length % 2 !== 0) {
            odd.next = new ListNode(head.val);
            odd= odd.next;
        } else {
            even.next = new ListNode(head.val);
            even= even.next;
        }
        
        head = head.next;
    }
    
    odd=List1.next;
    even=List2.next;
    
   var List3 = new ListNode();
    var ans = List3;
    
    while(odd || even) {
        if(odd) {
            
            ans.next = new ListNode(odd.val);
            ans = ans.next;
            odd = odd.next;
        } else {
           
            ans.next = even;
            break;
        }
    }
    
    return List3.next;
    
};



//Updated Code

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var oddEvenList = function(head) {
    if(!head) {
        return head;
    }
    var List = new ListNode(0);
    var dummy = List;

    var dummyhead= head;
    var dummyhead1 = head.next;
    while(dummyhead && dummyhead.next) {
        dummy.next = new ListNode(dummyhead.val);
        dummy = dummy.next;
        dummyhead = dummyhead.next.next;
       
    }
    if(dummyhead) {
        dummy.next = new ListNode(dummyhead.val);
        dummy = dummy.next;
    }

    

    while(dummyhead1 && dummyhead1.next) {
        dummy.next = new ListNode(dummyhead1.val);
         dummy = dummy.next;
         dummyhead1 = dummyhead1.next.next;

    }
   
    if(dummyhead1) {
        dummy.next = new ListNode(dummyhead1.val);
        dummy = dummy.next;
    }


  

    return List.next;


};
